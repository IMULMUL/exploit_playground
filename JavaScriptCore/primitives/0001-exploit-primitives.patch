From 42aaa0f14869274c7668e6ee999b108738eba9cf Mon Sep 17 00:00:00 2001
From: W00dL3cs <w00dl3cs@users.noreply.github.com>
Date: Tue, 6 Nov 2018 18:19:17 +0400
Subject: [PATCH] JavaScriptCore exploit primitives

---
 Source/JavaScriptCore/jsc.cpp | 87 +++++++++++++++++++++++++++++++++++
 1 file changed, 87 insertions(+)

diff --git a/Source/JavaScriptCore/jsc.cpp b/Source/JavaScriptCore/jsc.cpp
index e550a7244b6..ad080b06045 100644
--- a/Source/JavaScriptCore/jsc.cpp
+++ b/Source/JavaScriptCore/jsc.cpp
@@ -285,6 +285,9 @@ static EncodedJSValue JSC_HOST_CALL functionCreateGlobalObject(ExecState*);
 static EncodedJSValue JSC_HOST_CALL functionPrintStdOut(ExecState*);
 static EncodedJSValue JSC_HOST_CALL functionPrintStdErr(ExecState*);
 static EncodedJSValue JSC_HOST_CALL functionDebug(ExecState*);
+static EncodedJSValue JSC_HOST_CALL functionDbg(ExecState*);
+static EncodedJSValue JSC_HOST_CALL functionRead64(ExecState*);
+static EncodedJSValue JSC_HOST_CALL functionWrite64(ExecState*);
 static EncodedJSValue JSC_HOST_CALL functionDescribe(ExecState*);
 static EncodedJSValue JSC_HOST_CALL functionDescribeArray(ExecState*);
 static EncodedJSValue JSC_HOST_CALL functionSleepSeconds(ExecState*);
@@ -297,6 +300,7 @@ static EncodedJSValue JSC_HOST_CALL functionHeapSize(ExecState*);
 static EncodedJSValue JSC_HOST_CALL functionCreateMemoryFootprint(ExecState*);
 static EncodedJSValue JSC_HOST_CALL functionResetMemoryPeak(ExecState*);
 static EncodedJSValue JSC_HOST_CALL functionAddressOf(ExecState*);
+static EncodedJSValue JSC_HOST_CALL functionFakeObj(ExecState*);
 static EncodedJSValue JSC_HOST_CALL functionVersion(ExecState*);
 static EncodedJSValue JSC_HOST_CALL functionRun(ExecState*);
 static EncodedJSValue JSC_HOST_CALL functionRunString(ExecState*);
@@ -498,6 +502,9 @@ protected:
         Base::finishCreation(vm);

         addFunction(vm, "debug", functionDebug, 1);
+        addFunction(vm, "dbg", functionDbg, 0);
+        addFunction(vm, "read64", functionRead64, 1);
+        addFunction(vm, "write64", functionWrite64, 2);
         addFunction(vm, "describe", functionDescribe, 1);
         addFunction(vm, "describeArray", functionDescribeArray, 1);
         addFunction(vm, "print", functionPrintStdOut, 1);
@@ -511,6 +518,7 @@ protected:
         addFunction(vm, "MemoryFootprint", functionCreateMemoryFootprint, 0);
         addFunction(vm, "resetMemoryPeak", functionResetMemoryPeak, 0);
         addFunction(vm, "addressOf", functionAddressOf, 1);
+        addFunction(vm, "fakeObj", functionFakeObj, 1);
         addFunction(vm, "version", functionVersion, 1);
         addFunction(vm, "run", functionRun, 1);
         addFunction(vm, "runString", functionRunString, 1);
@@ -1224,6 +1232,70 @@ EncodedJSValue JSC_HOST_CALL functionDebug(ExecState* exec)
     return JSValue::encode(jsUndefined());
 }

+#if PLATFORM(IOS_FAMILY) && CPU(ARM64)
+#define __debugbreak() __asm__ __volatile__(            \
+"   mov    x0, %x0;    \n" /* pid                */ \
+"   mov    x1, #0x11;  \n" /* SIGSTOP            */ \
+"   mov    x16, #0x25; \n" /* syscall 37 = kill  */ \
+"   svc    #0x80       \n" /* software interrupt */ \
+"   mov    x0, x0      \n" /* nop                */ \
+::  "r"(getpid())                                   \
+:   "x0", "x1", "x16", "memory")
+#elif PLATFORM(IOS_FAMILY)
+#define __debugbreak() __asm__ __volatile__(            \
+"   mov    r0, %0;     \n" /* pid                */ \
+"   mov    r1, #0x11;  \n" /* SIGSTOP            */ \
+"   mov    r12, #0x25; \n" /* syscall 37 = kill  */ \
+"   svc    #0x80       \n" /* software interrupt */ \
+"   mov    r0, r0      \n" /* nop                */ \
+::  "r"(getpid())                                   \
+:   "r0", "r1", "r12", "memory")
+#elif OS(DARWIN) && CPU(X86_64)
+#define __debugbreak() __asm__ __volatile__("int $3; mov %eax, %eax")
+#endif
+
+EncodedJSValue JSC_HOST_CALL functionDbg(ExecState*)
+{
+    __debugbreak();
+    return JSValue::encode(jsUndefined());
+}
+
+
+EncodedJSValue JSC_HOST_CALL functionRead64(ExecState* exec)
+{
+    if (exec->argumentCount() < 1)
+        return JSValue::encode(jsUndefined());
+
+    JSValue value = exec->argument(0);
+    if (!value.isDouble())
+        return JSValue::encode(jsUndefined());
+
+    int64_t address = bitwise_cast<int64_t>(value.asDouble());
+    int64_t valueAtAddress = (int64_t)(*(int64_t*)address);
+
+    EncodedJSValue returnValue = JSValue::encode(jsNumber(bitwise_cast<double>(valueAtAddress)));
+    return returnValue;
+}
+
+EncodedJSValue JSC_HOST_CALL functionWrite64(ExecState* exec)
+{
+    if (exec->argumentCount() < 2)
+        return JSValue::encode(jsUndefined());
+
+    JSValue what = exec->argument(0);
+    JSValue where = exec->argument(1);
+
+    if (!what.isDouble() || !where.isDouble())
+        return JSValue::encode(jsUndefined());
+
+    int64_t address = bitwise_cast<int64_t>(where.asDouble());
+    int64_t valueAtAddress = bitwise_cast<int64_t>(what.asDouble());
+
+    *((int64_t*)address) = valueAtAddress;
+
+    return JSValue::encode(jsUndefined());
+}
+
 EncodedJSValue JSC_HOST_CALL functionDescribe(ExecState* exec)
 {
     if (exec->argumentCount() < 1)
@@ -1396,6 +1468,21 @@ EncodedJSValue JSC_HOST_CALL functionAddressOf(ExecState* exec)
     return returnValue;
 }

+EncodedJSValue JSC_HOST_CALL functionFakeObj(ExecState* exec)
+{
+    if (exec->argumentCount() < 1)
+        return JSValue::encode(jsUndefined());
+
+    JSValue where = exec->argument(0);
+    if (!where.isDouble())
+        return JSValue::encode(jsUndefined());
+
+    int64_t address = bitwise_cast<int64_t>(where.asDouble());
+
+    EncodedJSValue returnValue = JSValue::encode((JSCell*)address);
+    return returnValue;
+}
+
 EncodedJSValue JSC_HOST_CALL functionVersion(ExecState*)
 {
     // We need this function for compatibility with the Mozilla JS tests but for now
--
2.17.2 (Apple Git-113)

